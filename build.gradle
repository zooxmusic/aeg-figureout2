import com.bmuschko.gradle.cargo.tasks.remote.CargoDeployRemote

ext {
    group "com.aeg"
    version '0.0.1'
}


buildscript {

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'http://jcenter.bintray.com' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://maven.antelink.com/content/repositories/central/" }
        maven { url 'http://dl.bintray.com/sleroy/maven' }
    }

    dependencies {

        classpath(
                ["io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE"],
                ["org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"],
                ["com.bmuschko:gradle-cargo-plugin:2.2.2"],
                ["us.carrclan.david.gradle:gradle-site-plugin:0.2.0"],
                ["com.diffplug.gradle.spotless:spotless:1.3.3"],
                ["me.champeau.gradle:jbake-gradle-plugin:0.2"],
                ["org.asciidoctor:asciidoctor-java-integration:0.1.4"],
                ["org.freemarker:freemarker:2.3.19"]
                //["com.bmuschko:gradle-tomcat-plugin:2.2.4"]

        )
    }

}

    def deployContainers = [
            new RemoteContainer(name: 'prod',
                        containerId: "tomcat7x",
                        hostname: '10.50.52.216',
                        port: 9090, username: 'aeg',
                        password: 'AEG2016!!'),

            new RemoteContainer( name: 'dev',
                        containerId: "tomcat7x",
                        hostname: '10.50.100.210',
                        port: 9090, username: 'aeg',
                        password: 'AEG2016!!'),

            new RemoteContainer(name: 'qa',
                        containerId: "tomcat7x",
                        hostname: '10.50.100.211',
                        port: 9090, username: 'aeg',
                        password: 'AEG2016!!')
    ]

//apply plugin: "com.bmuschko.tomcat"
apply plugin: "me.champeau.jbake"
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: "site"
apply plugin: 'build-dashboard'
apply plugin: 'com.bmuschko.cargo-base'
apply plugin: "io.spring.dependency-management"
apply plugin: "java"
apply plugin: "groovy"
apply plugin: "spring-boot"
//apply plugin: "war"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven {
        url"http://maven.antelink.com/content/repositories/central/"
    }
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:2.0.3.RELEASE'
    }
}

configurations {
    //compile.exclude module: 'org.springframework.boot'
    //all*.exclude group: 'spring-boot-starter-tomcat'
    all*.exclude group: 'spring-boot-starter-logging'
    all*.exclude group: "ch.qos.logback"
    //all*.exclude group: "org.slf4j"
    all*.exclude group: "jboss-logging"
}


site {
    url = "http://ims.example.com/joe"
}

spotless {
    freshmark {}
    java {}
}
/*

war {
    baseName = 'aeg'
    archiveName 'aeg.war'

}*/

//cargoDeployRemote.dependsOn war


dependencies {
    //providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
    compile(
            // Spring Starter
            ["org.springframework.boot:spring-boot-starter-freemarker"],
            ["org.springframework.boot:spring-boot-starter"],
            ["org.springframework.boot:spring-boot-starter-actuator"],
            ["org.springframework.boot:spring-boot-starter-log4j2"],
            //["org.springframework.boot:spring-boot-starter-data-jpa"],
            ["org.springframework.boot:spring-boot-starter-mail"],

            // Spring Boot
            //["org.springframework.boot:spring-boot-devtools"],
            ['de.codecentric:spring-boot-admin-server:1.3.2'],
            ['de.codecentric:spring-boot-admin-server-ui:1.3.2'],
            ['de.codecentric:spring-boot-admin-starter-client:1.3.2'],

            // Spring Integration
            ["org.springframework.integration:spring-integration-java-dsl"],
            ["org.springframework.integration:spring-integration-ftp"],
            ["org.springframework.integration:spring-integration-sftp"],
            ["org.springframework.integration:spring-integration-mail"],
            ["org.springframework.integration:spring-integration-core"],

            // Spring Data
//            ["org.springframework.data:spring-data-jpa"],


            // Spring Batch
           //["org.springframework.batch:spring-batch-core"],
            //["org.springframework.batch:spring-batch-admin-manager:1.3.1.RELEASE"],
           // ["org.springframework.batch:spring-batch-admin-resources:1.3.1.RELEASE"],

            // Spring
           //["org.springframework:spring-context-support"],
            //["org.springframework:spring-tx"],
            //["org.springframework:spring-aop"],

            // Quartz and Scheduling
            ["org.quartz-scheduler:quartz:$quartzVersion"],
            ["com.google.guava:guava:$guavaVersion"],
            ["com.google.code.gson:gson:$gsonVersion"],
            ["joda-time:joda-time:2.9.2"],

            ["org.codehaus.groovy:groovy-all:$groovyVersion"],

            ["commons-collections:commons-collections:3.2.2"],
            ["org.freemarker:freemarker:2.3.24-incubating"],

            // Mail
            ["javax.mail:mail:1.4.7"],
            ["org.apache.sshd:apache-sshd:1.1.0"],
            ["org.apache.sshd:sshd-core:1.1.0"],

            ["org.projectlombok:lombok:$lombokVersion"],

            // Database
           //["mysql:mysql-connector-java:$mysqlVersion"],

            ["org.codehaus.cargo:cargo-core-uberjar:1.4.19"],

           // ["org.slf4j:slf4j-api:1.7.+"]
           // ["ch.qos.logback:logback-classic:1.+"]


    )

    testCompile(
            ["junit:junit:$junitVersion"],
            ["org.hamcrest:hamcrest-all:1.3"],
            ["org.mockito:mockito-core:1.9.5"],
            ["org.spockframework:spock-core:1.0-groovy-2.4"],
            ["org.jboss.arquillian:arquillian-junit:$arquillianVersion"],
            ["org.jvnet.mock-javamail:mock-javamail:1.9"],
            ["org.yaml:snakeyaml:1.17"],
            ["commons-lang:commons-lang:2.6"],
            ["org.testng:testng:6.9.10"],
            ["org.springframework.boot:spring-boot-starter-test"],
            ['org.testng:testng:6.9.10'],
    )

}


/*

deployContainers.each {
    config ->
        task "deploy${config.name.capitalize()}"(type: CargoDeployRemote) {
        description = "Deploys WAR to remote Server '${config.name}'."
        containerId = config.containerId
        hostname = config.hostname
        port = config.port
        username = config.username
        password = config.password
    }
}



task deployAll {
    dependsOn deployContainers.collect { "deploy${it.name.capitalize()}" }
    description = 'Deploys to all remote Server containers.'
    group = 'deployment'
    dependencies {
        providedCompile("javax.servlet:javax.servlet-api:3.1.0")
        cargo(
                ['org.codehaus.cargo:cargo-core-uberjar:1.4.19'],
                ['org.codehaus.cargo:cargo-ant:1.4.19'],
                ['jaxen:jaxen:1.1.6'],
                ["commons-logging:commons-logging:1.2"]
        )
    }
}*/
/*

cargo {
    port = 9080
    containerId = 'tomcat7x'

    deployable {
        context = 'aeg'
    }

    remote {
        hostname = '10.50.100.210'
        username = 'aeg'
        password = 'AEG2016!!'
    }
    dependencies {
        providedCompile("javax.servlet:javax.servlet-api:3.1.0")
        cargo(
                ['org.codehaus.cargo:cargo-core-uberjar:1.4.19'],
                ['org.codehaus.cargo:cargo-ant:1.4.19'],
                ['jaxen:jaxen:1.1.6'],
                ["commons-logging:commons-logging:1.2"]
        )
    }*/

    /*local {
        homeDir = file(System.getenv('CATALINA_HOME'))
        outputFile = file('build/output.log')
        timeout = 60000

        containerProperties {
            property 'cargo.tomcat.ajp.port', 8009
        }
    }*/
//}

/*
tomcat {
    httpPort = 9080
    httpsPort = 9443
    enableSSL = false
    contextPath = 'transfer'
    users {
        user {
            username = 'aeg'
            password = 'AEG2016!!'
            roles = ['manager-script','admin', 'manager-jmx', 'manager-gui']
        }
    }

    dependencies {
        def tomcatVersion = '7.0.68'
        tomcat("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
                "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
                "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}")
    }
}*/



/*

task initEnv(type:Exec) {
    //executable("reg")
    def key = "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";
    commandLine("REG", "DELETE", key)
    println 'execResult ' + execResult
    commandLine("REG",  "ADD", key , "/v", "GOODNEGRO", "/t", "REG_EXPAND_SZ", "/f", "/d", "UCKOFF")
    println 'execResult ' + execResult
//store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}*/




class RemoteContainer {
    String id;
    String containerId;
    String name
    String hostname
    Integer port
    String username
    String password
}






